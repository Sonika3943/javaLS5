21.class Book { 
String title; 
String author; 
double price; 
Book(String title, String author, double price) { 
this.title = title; 
this.author = author; 
this.price = price; 
} 
Book(String title, String author) { 
this(title, author, 500.0); 
} 
Book() {
 this("Unknown", "Unknown", 0.0); 
    } 
 
    void display() { 
        System.out.println("Title: " + title + ", Author: " + author + ", Price: 
" + price); 
    } 
 
    public static void main(String[] args) { 
        Book b1 = new Book("Java Basics", "Herbert", 600); 
        Book b2 = new Book("C Programming", "Dennis"); 
        Book b3 = new Book(); 
 
        b1.display(); 
        b2.display(); 
        b3.display(); 
    }} 

22. class Rectangle { 
        int length, breadth; 
 
        Rectangle() { 
            this.length = 1; 
            this.breadth = 1; 
        } 
 
        Rectangle(int side) { 
            this.length = side; 
            this.breadth = side; 
        } 
 
        Rectangle(int length, int breadth) { 
            this.length = length; 
            this.breadth = breadth; 
        } 
 
        int area() { 
            return length * breadth; 
        } 
 
        public static void main(String[] args) { 
            Rectangle r1 = new Rectangle(); 
            Rectangle r2 = new Rectangle(5); 
            Rectangle r3 = new Rectangle(4, 6); 
 
            System.out.println("Area (default): " + r1.area());
  System.out.println("Area (square): " + r2.area()); 
            System.out.println("Area (rectangle): " + r3.area()); 
        } 
    }

23. class Employee { 
        int id; 
        String name; 
        double salary; 
 
        Employee(int id, String name, double salary) { 
            this.id = id; 
            this.name = name; 
            this.salary = salary; 
        } 
 
        Employee(int id, String name) { 
            this(id, name, 30000.0); 
        } 
 
        void display() { 
            System.out.println("ID: " + id + ", Name: " + name + ", Salary: " + 
salary); 
        } 
 
        public static void main(String[] args) { 
            Employee e1 = new Employee(101, "Amit", 45000); 
            Employee e2 = new Employee(102, "Priya"); 
 
            e1.display(); 
            e2.display(); 
        } 
    } 

24.  class Car { 
        String brand; 
        String model; 
        int year; 
 
        Car(String brand) { 
            this.brand = brand; 
            this.model = "Unknown"; 
            this.year = 0; 
        }
  Car(String brand, String model) { 
            this.brand = brand; 
            this.model = model; 
            this.year = 0; 
        } 
 
        Car(String brand, String model, int year) { 
            this.brand = brand; 
            this.model = model; 
            this.year = year; 
        } 
 
        void display() { 
            System.out.println("Car: " + brand + ", Model: " + model + ", Year: 
" + year); 
        } 
 
        public static void main(String[] args) { 
            Car c1 = new Car("Toyota"); 
            Car c2 = new Car("Honda", "Civic"); 
            Car c3 = new Car("Ford", "Mustang", 2022); 
 
            c1.display(); 
            c2.display(); 
            c3.display(); 
        } 
    }

25. class Student { 
        String name; 
        int rollNo; 
 
        Student(String name) { 
            this.name = name; 
            this.rollNo = -1; 
        } 
 
        Student(String name, int rollNo) { 
            this.name = name; 
            this.rollNo = rollNo; 
        } 
 
        void display() { 
            System.out.println("Name: " + name + ", Roll No: " + rollNo); 
        }
 public static void main(String[] args) { 
            Student s1 = new Student("Neha"); 
            Student s2 = new Student("Ravi", 101); 
 
            s1.display(); 
            s2.display(); 
        } 
    } 

26. class Calculator { 
        int add(int a, int b) { 
            return a + b; 
        } 
 
        double add(double a, double b) { 
            return a + b; 
        } 
 
        String add(String a, String b) { 
            return a + b; 
        } 
 
        public static void main(String[] args) { 
            Calculator calc = new Calculator(); 
 
            System.out.println("Sum (int): " + calc.add(5, 7)); 
            System.out.println("Sum (double): " + calc.add(4.5, 3.2)); 
            System.out.println("Sum (string): " + calc.add("Hello ", "World")); 
        } 
    } 

27.  class Printer { 
        void print(int num) { 
            System.out.println("Integer: " + num); 
        } 
 
        void print(double num) {
 System.out.println("Double: " + num); 
        } 
 
        void print(String text) { 
            System.out.println("String: " + text); 
        } 
 
        public static void main(String[] args) { 
            Printer p = new Printer(); 
 
            p.print(100); 
            p.print(45.67); 
            p.print("Overloading Example"); 
        } 
    }

28.class MathOperations { 
        int multiply(int a, int b) { 
            return a * b; 
        } 
 
        int multiply(int a, int b, int c) { 
            return a * b * c; 
        } 
 
        double multiply(double a, double b) { 
            return a * b; 
        } 
 
        public static void main(String[] args) { 
            MathOperations mo = new MathOperations(); 
 
            System.out.println("Multiply (2 int): " + mo.multiply(3, 4)); 
            System.out.println("Multiply (3 int): " + mo.multiply(2, 3, 4)); 
            System.out.println("Multiply (double): " + mo.multiply(2.5, 4.0)); 
        } 
    } 

29.  // Overloading Example 
    class OverloadExample { 
        void show(int x) { 
            System.out.println("Integer: " + x); 
        }
 void show(String s) { 
            System.out.println("String: " + s); 
        } 
    } 
 
    // Overriding Example 
    class Parent { 
        void display() { 
            System.out.println("Parent Display"); 
        } 
    } 
 
    class Child extends Parent { 
        @Override 
        void display() { 
            System.out.println("Child Display"); 
        } 
    } 
 
    public class TestOverloadOverride { 
        public static void main(String[] args) { 
            // Overloading 
            OverloadExample oe = new OverloadExample(); 
            oe.show(10); 
            oe.show("Hello"); 
 
            // Overriding 
            Parent p = new Child(); 
            p.display(); 
        } 
    }

30. class ShapeArea { 
        int area(int side) { // square 
            return side * side; 
        } 
 
        int area(int length, int breadth) { // rectangle 
            return length * breadth; 
        } 
 
        double area(double radius) { // circle 
            return 3.14159 * radius * radius; 
        } 
 
        public static void main(String[] args) {
ShapeArea sa = new ShapeArea(); 
System.out.println("Square area: " + sa.area(5)); 
System.out.println("Rectangle area: " + sa.area(4, 6)); 
System.out.println("Circle area: " + sa.area(3.5)); 
} 
}
